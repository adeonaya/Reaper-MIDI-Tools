#define _CRT_SECURE_NO_WARNINGS
#include "my_plugin.hpp"
#include <reaper_plugin_functions.h>

auto COMMAND = "TBO_MIDI_PREVIEW";
auto ACTION = "Tools by Onaya: Preview MIDI Notes";
bool preview = true;
static WNDPROC g_ReaperTrackWndProc = NULL;

class RazorEditArea {
  public:
    static std::vector<RazorEditArea> GetRazorEditAreas();
    // includeEnclosedItems := include items which are fully enclosed by a razor
    // edit area
    static std::vector<MediaItem*> GetMediaItemsCrossingRazorEditAreas(
        bool includeEnclosedItems);

    MediaTrack* GetMediaTrack();
    double GetAreaStart();
    double GetAreaEnd();
    // empty string := razor edit area isn't an envelope
    std::string GetEnvelopeGUID();

  private:
    RazorEditArea();

    MediaTrack* m_track;
    double m_areaStart;
    double m_areaEnd;
    std::string m_envelopeGUID;
};

RazorEditArea::RazorEditArea()
    : m_track(nullptr)
    , m_areaStart(-1.0)
    , m_areaEnd(-1.0)
    , m_envelopeGUID("")
{
}

std::vector<RazorEditArea> RazorEditArea::GetRazorEditAreas()
{
    std::vector<RazorEditArea> razorEditAreas;
    if (atof(GetAppVersion()) < 6.24) // Razor edit area API was added in v6.24
        return razorEditAreas;

    char* razorEditAreasStr;
    for (int i = 1; i <= GetNumTracks(); i++) {
        // API returns space-separated triples of start time, end time, and
        // envelope GUID string
        razorEditAreasStr = reinterpret_cast<char*>(GetSetMediaTrackInfo(
            CSurf_TrackFromID(i, false),
            "P_RAZOREDITS",
            nullptr));
        if (razorEditAreasStr && razorEditAreasStr[0]) {
            RazorEditArea rea;
            // parse razorEditAreasStr
            char* token = strtok(razorEditAreasStr, " "); // start time
            while (token != nullptr) {
                rea.m_track = (CSurf_TrackFromID(i, false));
                rea.m_areaStart = (atof(token));

                token = strtok(nullptr, " "); // end time
                rea.m_areaEnd = (atof(token));

                token = strtok(nullptr, " "); // envelope GUID string
                if (token[1] == '{')
                    rea.m_envelopeGUID = token;
                else
                    rea.m_envelopeGUID = "";

                razorEditAreas.push_back(rea);
                token = strtok(nullptr, " "); // next triple
            }
        }
    }
    return razorEditAreas;
}

std::vector<MediaItem*> RazorEditArea::GetMediaItemsCrossingRazorEditAreas(
    bool includeEnclosedItems)
{
    std::vector<MediaItem*> itemsCrossingRazorEditAreas;

    std::vector<RazorEditArea> reas = RazorEditArea::GetRazorEditAreas();
    for (size_t i = 0; i < reas.size(); i++) {
        if (reas[i].m_envelopeGUID ==
            "") // only check razor edit areas which aren't envelopes
        {
            MediaTrack* track = reas[i].m_track;
            int itemCount = CountTrackMediaItems(track);
            for (int j = 0; j < itemCount; j++) {
                MediaItem* item = GetTrackMediaItem(track, j);
                double itemPos = GetMediaItemInfo_Value(item, "D_POSITION");
                double itemEnd =
                    itemPos + GetMediaItemInfo_Value(item, "D_LENGTH");

                // check if item is in razor edit area bounds
                if (includeEnclosedItems == false &&
                    reas[i].m_areaStart <= itemPos &&
                    reas[i].m_areaEnd >= itemEnd) // rea encloses item
                    continue;
                if ((itemEnd > reas[i].m_areaStart &&
                     itemEnd <= reas[i].m_areaEnd)     // item end within rea
                    || (itemPos >= reas[i].m_areaStart &&
                        itemPos < reas[i].m_areaEnd)   // item start within rea
                    || (itemPos <= reas[i].m_areaStart &&
                        itemEnd >= reas[i].m_areaEnd)) // item encloses rae
                    itemsCrossingRazorEditAreas.push_back(item);
            }
        }
    }
    return itemsCrossingRazorEditAreas;
}

MediaTrack* RazorEditArea::GetMediaTrack()
{
    return m_track;
}

double RazorEditArea::GetAreaStart()
{
    return m_areaStart;
}

double RazorEditArea::GetAreaEnd()
{
    return m_areaEnd;
}

std::string RazorEditArea::GetEnvelopeGUID()
{
    return m_envelopeGUID;
}

static int translateAccel(MSG* msg, accelerator_register_t* ctx)
{
    if (msg->message == WM_KEYDOWN) {
        char buf[256];
        sprintf_s(
            buf,
            "HWND: %p wParam: %p lParam: %p\n",
            msg->hwnd,
            (void*)msg->wParam,
            (void*)msg->lParam);
        ShowConsoleMsg(buf);
        return 1;
    }
    return 0;
}

static accelerator_register_t g_ar = {translateAccel, TRUE, NULL};

static HWND SearchChildren(
    const char* name,
    HWND hwnd,
    HWND startHwnd = NULL,
    bool windowHasNoChildren = false)
{
    {
        HWND returnHwnd = startHwnd;
        while (true) {
            returnHwnd = FindWindowEx(hwnd, returnHwnd, NULL, name);
            if (!returnHwnd || !windowHasNoChildren ||
                !GetWindow(returnHwnd, GW_CHILD))
                return returnHwnd;
        }
    }
}
static void AllocPreparedString(const char* name, char** destination)
{
    *destination = const_cast<char*>(name);
}

static HWND SearchFloatingDockers(
    const char* name,
    const char* dockerName,
    bool windowHasNoChildren = false)
{
    HWND main_hwnd = GetMainHwnd();
    HWND docker = FindWindowEx(NULL, NULL, NULL, dockerName);
    while (docker) {
        if (GetParent(docker) == main_hwnd) {
            HWND insideDocker = FindWindowEx(docker, NULL, NULL, "REAPER_dock");
            while (insideDocker) {
                if (HWND w = SearchChildren(
                        name,
                        insideDocker,
                        NULL,
                        windowHasNoChildren))
                    return w;
                insideDocker =
                    FindWindowEx(docker, insideDocker, NULL, "REAPER_dock");
            }
        }
        docker = FindWindowEx(NULL, docker, NULL, dockerName);
    }
    return NULL;
}

static HWND FindInFloatingDockers(
    const char* name,
    bool windowHasNoChildren = false)
{
#ifdef _WIN32
    HWND hwnd = SearchFloatingDockers(name, NULL, windowHasNoChildren);
#else
    HWND hwnd = SearchFloatingDockers(
        name,
        __localizeFunc("Docker", "docker", 0),
        windowHasNoChildren);
    if (!hwnd) {
        WDL_FastString dockerName;
        dockerName.AppendFormatted(
            256,
            "%s%s",
            name,
            __localizeFunc(" (docked)", "docker", 0));
        hwnd =
            SearchFloatingDockers(name, dockerName.Get(), windowHasNoChildren);
    }
    if (!hwnd)
        hwnd = SearchFloatingDockers(
            name,
            __localizeFunc("Toolbar Docker", "docker", 0),
            windowHasNoChildren);
#endif

    return hwnd;
}

static HWND FindInReaperDockers(const char* name)
{
    HWND main_hwnd = GetMainHwnd();
    HWND docker = FindWindowEx(main_hwnd, NULL, NULL, "REAPER_dock");
    while (docker) {
        if (HWND hwnd = SearchChildren(name, docker))
            return hwnd;
        docker = FindWindowEx(main_hwnd, docker, NULL, "REAPER_dock");
    }
    return NULL;
}
static HWND FindFloating(
    const char* name,
    bool checkForNoCaption = false,
    bool windowHasNoChildren = false)
{
    HWND main_hwnd = GetMainHwnd();
    HWND hwnd = SearchChildren(name, NULL);
    while (hwnd) {
        if (GetParent(hwnd) == main_hwnd) {
            if ((!checkForNoCaption ||
                 !(GetWindowLongPtr(hwnd, GWL_STYLE) & WS_CAPTION)) &&
                (!windowHasNoChildren || !GetWindow(hwnd, GW_CHILD)))
                return hwnd;
        }
        hwnd = SearchChildren(name, NULL, hwnd);
    }
    return NULL;
}

static HWND FindInReaper(const char* name)
{
    HWND main_hwnd = GetMainHwnd();
    return SearchChildren(name, main_hwnd);
}

static HWND FindReaperWndByPreparedString(const char* name)
{
    if (name) {
        HWND hwnd = FindInReaperDockers(name);
        if (!hwnd)
            hwnd = FindFloating(name);
        if (!hwnd)
            hwnd = FindInFloatingDockers(name);
        if (!hwnd)
            hwnd = FindInReaper(name);
        return hwnd;
    }
    return NULL;
}

HWND GetMIDITakerWnd()
{
    static char* s_name = NULL;
    if (!s_name)
        AllocPreparedString("MIDI take", &s_name);
    return FindReaperWndByPreparedString(s_name);
}

HWND GetMediaExplorerWnd()
{
    static char* s_name = NULL;
    if (!s_name)
        AllocPreparedString("Media Explorer", &s_name);
    return FindReaperWndByPreparedString(s_name);
}

HWND GetVirtualKeyboardWnd()
{
    static char* s_name = NULL;
    if (!s_name)
        AllocPreparedString("Virtual MIDI keyboard", &s_name);
    return FindReaperWndByPreparedString(s_name);
}

HWND GetTrackWnd()
{
    static HWND s_hwnd = nullptr;
    if (!s_hwnd)
        s_hwnd = GetDlgItem(GetMainHwnd(), 1000);
    return s_hwnd;
}

HWND GetPianoView()
{
    HWND MIDIEditor = MIDIEditor_GetActive();
    if (MIDIEditor_GetMode(MIDIEditor) != -1)
        return GetDlgItem(MIDIEditor, 1000);
    else
        return nullptr;
}

double GetItemHeaderHeight(MediaItem* item)
{
    int limit = 4;
    MediaTrack* track = GetMediaItem_Track(item);
    double track_height = GetMediaTrackInfo_Value(track, "I_TCPH");
    double height = GetMediaItemInfo_Value(item, "I_LASTH");
    double header_height =
        track_height - height > limit && track_height - height || 0;
    if (header_height > 0) {
        header_height = header_height - limit;
    }
    header_height += 16;
    return header_height;
}
LRESULT CALLBACK
TrackWndProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    static POINT p;
    // std::vector<RazorEditArea> razor = RazorEditArea::GetRazorEditAreas();
    // if (uMsg == WM_LBUTTONDOWN) {
    //     GetCursorPos(&p);
    //     HWND arrange = GetDlgItem(GetMainHwnd(), 1000);
    //     MediaItem* item = GetItemFromPoint(p.x, p.y, true, NULL);
    //     ScreenToClient(arrange, &p);
    //     if (item) {
    //         MediaTrack* track = GetMediaItem_Track(item);
    //         double track_y = GetMediaTrackInfo_Value(track, "I_TCPY") +
    //                          GetItemHeaderHeight(item);
    //         if (p.y > track_y) {
    //             if (GetCursorContext() != 2) {
    //                 Main_OnCommand(42406, 0);
    //             }
    //             SetMouseModifier("MM_CTX_ITEM", 0, "28");
    //         }
    //         else {
    //             SetMouseModifier("MM_CTX_ITEM", 0, "13");
    //         }
    //     }
    //     else {
    //         if (razor.size() > 0) {
    //             if (GetCursorContext() != 2) {
    //                 Main_OnCommand(42406, 0);
    //             }
    //         }
    //     }
    // }
    // if (uMsg == WM_LBUTTONUP) {
    //     std::vector<MediaItem*> items = razor[0].GetMediaItemsCrossingRazorEditAreas(true);
    //     // char buf[256];
    //     // sprintf_s(buf, "items: %zi\n", items.size());
    //     // ShowConsoleMsg(buf);
    //     if (items.size() > 0) {
    //         ShowConsoleMsg("bonjour\n");
    //         for (const auto& item : items) {
    //             SetMediaItemSelected(item, true);
    //         }
    //     }
    // }
    if (uMsg == WM_MOUSEWHEEL && GetAsyncKeyState(VK_LCONTROL)) {
        int val = (short)HIWORD(wParam);
        double division;
        int ret = GetSetProjectGrid(0, 0, &division, 0, 0);
        // double out = division * 0.5;
        // char buf[256];
        // sprintf_s(buf, "val: %i out: %f \n", val, out);
        // ShowConsoleMsg(buf);
        if (val > 0 && division < 1/64) {
            SetProjectGrid(0, division / 2);
        }
        else if (val < 0 && division > 2) {
            SetProjectGrid(0, division * 2);
        }
    }
    return g_ReaperTrackWndProc(hwnd, uMsg, wParam, lParam);
}

// our "main function" in this example
void MainFunctionOfMyPlugin()
{
    HWND MIDIEditor = MIDIEditor_GetActive();
    int preview_midi_notes_toggle =
        GetToggleCommandStateEx(MIDI_EDITOR_SECTION, 40041);
    int media_item_lane_toggle =
        GetToggleCommandStateEx(MIDI_EDITOR_SECTION, 40819);
    int docked_midi_editor_toggle =
        GetToggleCommandStateEx(MIDI_EDITOR_SECTION, 40018);
    int playstate = GetPlayState();
    if (MIDIEditor && (GetAsyncKeyState(VK_RBUTTON) & 1)) {
        MIDIEditor_OnCommand(MIDIEditor, 40214); // Edit: Unselect all
    }
    if (preview) {
        if (MIDIEditor && !playstate && !preview_midi_notes_toggle) {
            MIDIEditor_OnCommand(
                MIDIEditor,
                40041); // Options: Preview notes when inserting or editing
        }
        else if (MIDIEditor && playstate && preview_midi_notes_toggle) {
            MIDIEditor_OnCommand(
                MIDIEditor,
                40041); // Options: Preview notes when inserting or editing
        }
    }

    if (media_item_lane_toggle) {
        MIDIEditor_OnCommand(
            MIDIEditor,
            40819); // Contents: Show/hide media item lane
    }
    if (!docked_midi_editor_toggle) {
        MIDIEditor_OnCommand(
            MIDIEditor,
            40018); // Options: Toggle window docking
    }
    int crossfade = GetToggleCommandState(40041);
    int VKB = GetToggleCommandState(40637);
    if (crossfade) {
        Main_OnCommand(40041, 0);
    }
    if (!VKB) {
        Main_OnCommand(40637, 0);
    }

    return;
}

// commandID declaration and
// C++11 style initialization
int commandID {0};

// initial toggle on/off state
// after plugin is loaded
bool state {false};

// enable reaper.deferlike behavior,
// more like timed while true loop over main function
// MainFunctionOfMyPlugin will be registered on timer
bool defer {true};

// set action to register,
// 0 = main action,
// see reaper_plugin.h
custom_action_register_t action = {0, COMMAND, ACTION, NULL};

// returns current toggle on/off state,
// see reaper_plugin.h
int ToggleActionCallback(int command)
{
    if (command != commandID) {
        return -1;
    }
    else if (state) {
        return 1;
    }
    return 0;
}

// runs the main function on command,
// see reaper_plugin_functions.h
bool OnAction(
    KbdSectionInfo* sec,
    int command,
    int val,
    int valhw,
    int relmode,
    HWND hwnd)
{
    // treat unused variables 'pedantically'
    (void)sec;
    (void)val;
    (void)valhw;
    (void)relmode;
    (void)hwnd;

    // check command
    if (command != commandID) {
        return false;
    }

    // depending on state,
    // register main function to timer
    if (defer) {
        // flip state on/off
        state = !state;

        if (state) {
            // "reaper.defer(main)"
            plugin_register("timer", (void*)MainFunctionOfMyPlugin);
        }
        else {
            // "reaper.atexit(shutdown)"
            plugin_register("-timer", (void*)MainFunctionOfMyPlugin);
            // shutdown stuff
        }
    }
    else {
        // call main function once
        MainFunctionOfMyPlugin();
    }

    return true;
}
// static void importExtensionAPI()
// {
// 	plugin_register("-timer", (void*)importExtensionAPI);

// 	// import functions exposed by third-party extensions
// 	BR_GetMouseCursorContext =
// (decltype(BR_GetMouseCursorContext))plugin_getapi("BR_GetMouseCursorContext");
// }

// add menu entry under Extensions
void MenuHook(const char* menuidstr, HMENU menu, int flag)
{
    if (strcmp(menuidstr, "Main extensions") || flag != 0)
        return;

    if (!menu) {
        menu = CreatePopupMenu();
    }

    int pos = GetMenuItemCount(menu);

    MENUITEMINFO mii;
    mii.cbSize = sizeof(mii);
    mii.fMask = MIIM_TYPE | MIIM_ID;
    mii.fType = MFT_STRING;
    // menu name
    mii.dwTypeData = (char*)ACTION;
    // menu command
    mii.wID = commandID;
    // insert as next menu item
    InsertMenuItem(menu, pos++, true, &mii);
    return;
}

void RegisterMyPlugin()
{
    // register action name and get command_id
    commandID = plugin_register("custom_action", &action);

    // register action on/off state and callback function
    if (defer) {
        plugin_register("toggleaction", (void*)ToggleActionCallback);
    }

    // register run action/command
    plugin_register("hookcommand2", (void*)OnAction);

    // register menu
    plugin_register("hookcustommenu", (void*)MenuHook);

    // plugin_register("accelerator",&g_ar);
    // plugin_register("timer", (void*)importExtensionAPI);
    HWND hTrackView = GetTrackWnd();
    if (hTrackView)
        g_ReaperTrackWndProc = (WNDPROC)
            SetWindowLongPtr(hTrackView, GWLP_WNDPROC, (LONG_PTR)TrackWndProc);
    AddExtensionsMainMenu();
}

void UnregisterMyPlugin()
{
    plugin_register("-custom_action", &action);
    plugin_register("-toggleaction", (void*)ToggleActionCallback);
    plugin_register("-hookcommand2", (void*)OnAction);
    plugin_register("-hookcustommenu", (void*)MenuHook);
    // plugin_register("-accelerator",&g_ar);
    return;
}
